#+html: <p align="center"><img src="images/emacs-logo.svg" width=150 height=150/></p>
#+html: <p align="center"><a href="https://www.gnu.org/software/emacs/"><b>GNU Emacs</b></a></p>
#+html: <p align="center">
#+html:	<a href="https://github.com/emacs-mirror/emacs"><img src="https://img.shields.io/badge/GNU%20Emacs-master-b48ead.svg?style=flat-square"/></a>
#+html:    <a href ="https://github.com/xhcoding/.emacs.d"><img src="https://img.shields.io/badge/-Windows11-1e81ff?logo=windows&style=flat"/></a>
#+html: </p>
#+html: <p align="center">A simple Emacs config on Windows</p>


* 安装方法

1. 下载配置文件
   #+begin_src shell
     git clone https://github.com/xhcoding/.emacs.d.git ~/.emacs.d
   #+end_src
2. 运行 =org-tangle.bat= 生成 =.el= 文件

3. 启动 emacs

* 目录                                                                  :TOC:
- [[#安装方法][安装方法]]
- [[#early-initel][early-init.el]]
  - [[#将-gc-的阈值设置到最大避免启动的时候多次-gc-拖慢启动速度][将 gc 的阈值设置到最大，避免启动的时候多次 gc 拖慢启动速度]]
  - [[#file-handler-临时设置为-nil加快启动速度][file handler 临时设置为 nil，加快启动速度]]
  - [[#不要初始化-package][不要初始化 package]]
  - [[#禁止-frame-缩放][禁止 frame 缩放]]
  - [[#关闭菜单栏][关闭菜单栏]]
  - [[#关闭工具栏][关闭工具栏]]
  - [[#关闭滚动条][关闭滚动条]]
  - [[#启动后全屏][启动后全屏]]
  - [[#straight-包管理][straight 包管理]]
  - [[#空闲时增量加载包][空闲时增量加载包]]
  - [[#启动速度测试][启动速度测试]]
- [[#emacs-配置][emacs 配置]]
  - [[#载入-custom-文件][载入 custom 文件]]
  - [[#定义一些固定的常量][定义一些固定的常量]]
  - [[#常用的工具函数][常用的工具函数]]
    - [[#重命名当前文件][重命名当前文件]]
    - [[#删除当前文件][删除当前文件]]
    - [[#清理-message-buffer][清理 Message buffer]]
    - [[#开关网络代理][开关网络代理]]
    - [[#清理掉没用的-buffer][清理掉没用的 buffer]]
  - [[#基本设置][基本设置]]
    - [[#用户信息][用户信息]]
    - [[#增加-io-性能][增加 IO 性能]]
    - [[#设置编码][设置编码]]
    - [[#设置-frame-标题][设置 frame 标题]]
    - [[#关闭启动动画][关闭启动动画]]
    - [[#scratch-buffer-设置][scratch buffer 设置]]
    - [[#yes-or-no-p-改为-y-or-n-p][yes-or-no-p 改为 y-or-n-p]]
    - [[#关掉提示声音][关掉提示声音]]
    - [[#禁止光标闪烁][禁止光标闪烁]]
    - [[#启动时不要显示-for-information-about-gnu-emacs][启动时不要显示 For information about GNU Emacs...]]
    - [[#tab-设置][tab 设置]]
    - [[#一行不超过-120-字符][一行不超过 120 字符]]
    - [[#删除文件时放到回收站][删除文件时放到回收站]]
    - [[#高亮当前行][高亮当前行]]
    - [[#利用左边-win-键][利用左边 Win 键]]
  - [[#gcmh-优化垃圾回收][gcmh 优化垃圾回收]]
  - [[#auto-save-自动保存][auto-save 自动保存]]
  - [[#rime-智能的中文输入法][rime 智能的中文输入法]]
  - [[#字体和主题][字体和主题]]
  - [[#ligature-连字体][ligature 连字体]]
  - [[#awesome-tray-底部信息显示][awesome-tray 底部信息显示]]
  - [[#sort-tab-快速切换到其它-buffer][sort-tab 快速切换到其它 buffer]]
  - [[#hydra-方便的快捷键设置][hydra 方便的快捷键设置]]
  - [[#recentf-读取最近文件][recentf 读取最近文件]]
  - [[#popper-更方便的弹出窗口][popper 更方便的弹出窗口]]
  - [[#autorevert-自动同步外部文件改变][autorevert 自动同步外部文件改变]]
  - [[#minibuffer-补全及增强][minibuffer 补全及增强]]
  - [[#vundo-undo-增强][vundo undo 增强]]
  - [[#avy-快速移动光标到屏幕上任意字符][avy 快速移动光标到屏幕上任意字符]]
  - [[#ace-window-快速切换到其它-window][ace-window 快速切换到其它 window]]
  - [[#toggle-one-window-快速切换到单窗口][toggle-one-window 快速切换到单窗口]]
  - [[#yasnippet-快速插入代码片段][yasnippet 快速插入代码片段]]
  - [[#projectel-工程管理][project.el 工程管理]]
  - [[#eshell-增强][eshell 增强]]
    - [[#eshell-基本配置][eshell 基本配置]]
    - [[#eshell-历史记录设置][eshell 历史记录设置]]
    - [[#esh-mode-设置][esh-mode 设置]]
    - [[#eshell-git-prompt-提示符美化][eshell-git-prompt 提示符美化]]
    - [[#eshell-z-智能目录跳转][eshell-z 智能目录跳转]]
  - [[#fingertip-智能括号插入][fingertip 智能括号插入]]
  - [[#color-rg-快速搜索重构][color-rg 快速搜索重构]]
  - [[#lsp-bridge-代码补全][lsp-bridge 代码补全]]
  - [[#highlight-parentheses-高亮外层括号][highlight-parentheses 高亮外层括号]]
  - [[#evil-nerd-commenter-智能注释代码][evil-nerd-commenter 智能注释代码]]
  - [[#apheleia-智能格式化代码][apheleia 智能格式化代码]]
  - [[#git-配置][git 配置]]
    - [[#magit][magit]]
    - [[#显示当前行的最后提交信息][显示当前行的最后提交信息]]
    - [[#smerge-mode-解决冲突][smerge-mode 解决冲突]]
  - [[#visual-regexp-可视化的正则替换][visual-regexp 可视化的正则替换]]
  - [[#expand-region-递增选区][expand-region 递增选区]]
  - [[#openwith-外部工具打开文件][openwith 外部工具打开文件]]
  - [[#启用-treesit][启用 treesit]]
  - [[#ts-fold-基于-treesit-的代码折叠][ts-fold 基于 treesit 的代码折叠]]
  - [[#elisp-配置][elisp 配置]]
  - [[#c-开发配置][C++ 开发配置]]
    - [[#citre][citre]]
    - [[#cmake-ts-mode-设置][cmake-ts-mode 设置]]
    - [[#c-ts-mode-设置][c-ts-mode 设置]]
    - [[#导入-vs-环境变量][导入 VS 环境变量]]
  - [[#rust-开发配置][Rust 开发配置]]
  - [[#python-开发配置][python 开发配置]]
  - [[#java-开发配置][java 开发配置]]
  - [[#web-开发][web 开发]]
    - [[#javascript][Javascript]]
    - [[#typescript][Typescript]]
    - [[#html][HTML]]
    - [[#css][css]]
  - [[#json-ts-mode][json-ts-mode]]
  - [[#qml-开发][qml 开发]]
  - [[#plantuml-支持][plantuml 支持]]
  - [[#dap-mode-调试][dap-mode 调试]]
  - [[#dash-docs-查询-dash-文档][dash-docs 查询 dash 文档]]
  - [[#shrface-让-eww-的阅读体验更好][shrface 让 eww 的阅读体验更好]]
  - [[#eww-配置][eww 配置]]
  - [[#olivetti-居中显示内容][olivetti 居中显示内容]]
  - [[#org-配置][org 配置]]
    - [[#org-mode-美化设置][org-mode 美化设置]]
    - [[#org-基本配置][org 基本配置]]
    - [[#org-babel-设置][org babel 设置]]
    - [[#gtd-配置][gtd 配置]]
    - [[#export-设置][export 设置]]
    - [[#生成-toc][生成 TOC]]
    - [[#org-contrib-wanderlust-支持][org-contrib wanderlust 支持]]
    - [[#增量载入-org-包][增量载入 org 包]]
  - [[#知识管理及博客配置][知识管理及博客配置]]
    - [[#org-roam][org-roam]]
    - [[#hugo-配置][hugo 配置]]
    - [[#上传博客图片到腾讯云对象存储][上传博客图片到腾讯云对象存储]]
    - [[#自动在中英文插入空格][自动在中英文插入空格]]
    - [[#org-download-下载图片][org-download 下载图片]]
  - [[#eaf-配置][eaf 配置]]
  - [[#popweb-配置][popweb 配置]]
  - [[#dictionary-overlay-方便阅读英文文章][dictionary-overlay 方便阅读英文文章]]
  - [[#邮件配置][邮件配置]]
    - [[#wanderlust-邮件前端][Wanderlust 邮件前端]]
    - [[#alert-toast-邮件通知][alert-toast 邮件通知]]
  - [[#elfeed-rss-订阅][elfeed RSS 订阅]]
  - [[#leetcodeel-刷题][leetcode.el 刷题]]
  - [[#latex][LaTex]]
  - [[#emacs-aichat-ai-对话][emacs-aichat AI 对话]]
  - [[#which-key-按键提示][which-key 按键提示]]
  - [[#meow-模式编辑][meow 模式编辑]]
  - [[#启动-emacs-server][启动 emacs server]]
  - [[#daemon-模式下启动更多内容][daemon 模式下启动更多内容]]

* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:

Emacs 启动过程的早期加载。

#+begin_src elisp
  ;;; early-init.el --- early init  -*- lexical-binding: t no-byte-compile: t; -*-
#+end_src

** 将 gc 的阈值设置到最大，避免启动的时候多次 gc 拖慢启动速度

#+begin_src elisp
  (setq gc-cons-threshold most-positive-fixnum)
  (setq debug-on-error t)
#+end_src

** file handler 临时设置为 nil，加快启动速度

#+begin_src emacs-lisp
  (unless (or (daemonp) noninteractive init-file-debug)
    (let ((old-file-name-handler-alist file-name-handler-alist))
      (setq file-name-handler-alist nil)
      (add-hook 'emacs-startup-hook
                (lambda ()
                  "Recover file name handlers."
                  (setq file-name-handler-alist
                        (delete-dups (append file-name-handler-alist
                                             old-file-name-handler-alist)))))))

#+end_src

** 不要初始化 package

#+begin_src elisp
  (setq package-enable-at-startup nil)
#+end_src

** 禁止 frame 缩放

#+begin_src elisp
  (setq frame-inhibit-implied-resize t)
#+end_src

** 关闭菜单栏

#+begin_src elisp
  (push '(menu-bar-lines . 0) default-frame-alist)
#+end_src

** 关闭工具栏

#+begin_src elisp
  (push '(tool-bar-lines . 0) default-frame-alist)
#+end_src

** 关闭滚动条

#+begin_src elisp
  (push '(vertical-scroll-bars) default-frame-alist)
#+end_src

** 启动后全屏

#+begin_src elisp
  (push '(fullscreen . fullscreen) default-frame-alist)
#+end_src

** straight 包管理

#+begin_src elisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (let ((proxy (or (getenv "PROXY") "127.0.0.1:7890")))
        (setq url-proxy-services
              `(("http" . ,proxy)
                ("https" . ,proxy)
                ("no_proxy" . "0.0.0.0"))))
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (message "%s" (buffer-string))
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq straight-vc-git-default-clone-depth 1)

#+end_src

** 空闲时增量加载包
from: https://github.com/doomemacs/doomemacs/blob/master/lisp/doom-start.el

#+begin_src emacs-lisp
  (defvar doom-incremental-packages '(t)
    "A list of packages to load incrementally after startup. Any large packages
  here may cause noticeable pauses, so it's recommended you break them up into
  sub-packages. For example, `org' is comprised of many packages, and can be
  broken up into:

    (doom-load-packages-incrementally
     '(calendar find-func format-spec org-macs org-compat
       org-faces org-entities org-list org-pcomplete org-src
       org-footnote org-macro ob org org-clock org-agenda
       org-capture))

  This is already done by the lang/org module, however.

  If you want to disable incremental loading altogether, either remove
  `doom-load-packages-incrementally-h' from `emacs-startup-hook' or set
  `doom-incremental-first-idle-timer' to nil. Incremental loading does not occur
  in daemon sessions (they are loaded immediately at startup).")

  (defvar doom-incremental-first-idle-timer (if (daemonp) 0 2.0)
    "How long (in idle seconds) until incremental loading starts.

  Set this to nil to disable incremental loading.
  Set this to 0 to load all incrementally deferred packages immediately at
  `emacs-startup-hook'.")

  (defvar doom-incremental-idle-timer 0.75
    "How long (in idle seconds) in between incrementally loading packages.")

  (defun doom-load-packages-incrementally (packages &optional now)
    "Registers PACKAGES to be loaded incrementally.

  If NOW is non-nil, load PACKAGES incrementally, in `doom-incremental-idle-timer'
  intervals."
    (let ((gc-cons-threshold most-positive-fixnum))
      (if (not now)
          (cl-callf append doom-incremental-packages packages)
        (while packages
          (let ((req (pop packages))
                idle-time)
            (if (featurep req)
                (message "start:iloader: Already loaded %s (%d left)" req (length packages))
              (condition-case-unless-debug e
                  (and
                   (or (null (setq idle-time (current-idle-time)))
                       (< (float-time idle-time) doom-incremental-first-idle-timer)
                       (not
                        (while-no-input
                          (message "start:iloader: Loading %s (%d left)" req (length packages))
                          ;; If `default-directory' doesn't exist or is
                          ;; unreadable, Emacs throws file errors.
                          (let ((default-directory user-emacs-directory)
                                (inhibit-message t)
                                (file-name-handler-alist
                                 (list (rassq 'jka-compr-handler file-name-handler-alist))))
                            (require req nil t)
                            t))))
                   (push req packages))
                (error
                 (message "Error: failed to incrementally load %S because: %s" req e)
                 (setq packages nil)))
              (if (null packages)
                  (message "start:iloader: Finished!")
                (run-at-time (if idle-time
                                 doom-incremental-idle-timer
                               doom-incremental-first-idle-timer)
                             nil #'doom-load-packages-incrementally
                             packages t)
                (setq packages nil))))))))

  (defun doom-load-packages-incrementally-h ()
    "Begin incrementally loading packages in `doom-incremental-packages'.

  If this is a daemon session, load them all immediately instead."
    (when (numberp doom-incremental-first-idle-timer)
      (if (zerop doom-incremental-first-idle-timer)
          (mapc #'require (cdr doom-incremental-packages))
        (run-with-idle-timer doom-incremental-first-idle-timer
                             nil #'doom-load-packages-incrementally
                             (cdr doom-incremental-packages) t))))

  (add-hook 'emacs-startup-hook #'doom-load-packages-incrementally-h 100)


#+end_src

** 启动速度测试

#+begin_src elisp
(use-package benchmark-init
  :straight t
  :demand t
  :hook (after-init . benchmark-init/deactivate)
  :bind ("<f7>" . benchmark-init/show-durations-tree)
  )

#+end_src

* emacs 配置
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:

#+begin_src elisp
  ;;; init.el --- init  -*- lexical-binding: t no-byte-compile: t; -*-
#+end_src
