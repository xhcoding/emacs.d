* 安装方法

1. 下载配置文件
   #+begin_src shell
     git clone https://github.com/xhcoding/.emacs.d.git ~/.emacs.d
   #+end_src
2. 运行 org-tangle.bat 导出配置到 .el 文件

3. 启动 emacs

* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:

Emacs 启动过程的早期加载。

#+begin_src elisp
  ;;; early-init.el --- early init  -*- lexical-binding: t no-byte-compile: t; -*-
#+end_src

** 将 gc 的阈值设置到最大，避免启动的时候多次 gc 拖慢启动速度

#+begin_src elisp
  (setq gc-cons-threshold most-positive-fixnum)
#+end_src

** 不要初始化 package

#+begin_src elisp
  (setq package-enable-at-startup nil)
#+end_src

** 禁止 frame 缩放

#+begin_src elisp
  (setq frame-inhibit-implied-resize t)
#+end_src

** 关闭菜单栏

#+begin_src elisp
  (push '(menu-bar-lines . 0) default-frame-alist)
#+end_src

** 关闭工具栏

#+begin_src elisp
  (push '(tool-bar-lines . 0) default-frame-alist)
#+end_src

** 关闭滚动条

#+begin_src elisp
  (push '(vertical-scroll-bars) default-frame-alist)
#+end_src

** 启动后全屏

#+begin_src elisp
  (push '(fullscreen . fullscreen) default-frame-alist)
#+end_src

** straight 包管理

#+begin_src elisp

  (defvar bootstrap-version)
  (let ((bootstrap-file
     (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
    (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)

      (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
       'silent 'inhibit-cookies)
    (goto-char (point-max))
    (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (setq straight-vc-git-default-clone-depth 1)

#+end_src

** 启动速度测试

#+begin_src elisp
(use-package benchmark-init
  :straight t
  :demand t
  :hook (after-init . benchmark-init/deactivate)
  :bind ("<f7>" . benchmark-init/show-durations-tree)
  )

#+end_src

* emacs 配置
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:

#+begin_src elisp
  ;;; init.el --- init  -*- lexical-binding: t no-byte-compile: t; -*-
#+end_src

** 载入 custom 文件

#+begin_src elisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+end_src

** 定义一些固定的常量
#+begin_src elisp
  (defconst sys-is-windows (memq system-type '(cygwin windows-nt ms-dos)))

  ;; 动态库目录
  (defconst my-lib-dir (expand-file-name "lib" user-emacs-directory))

  ;; 外部配置文件目录
  (defconst my-etc-dir (expand-file-name "etc" user-emacs-directory))

  ;; 存放 org 文件的目录
  (defconst my-org-dir (expand-file-name "~/Org/"))

  ;; 私有文件目录
  (defconst my-private-dir (expand-file-name "private" my-org-dir))

  ;; 私有代码片段目录
  (defconst my-private-snippets-dir (expand-file-name "snippets" my-private-dir))

  ;; 存放代码的目录
  (if sys-is-windows
      (defconst my-code-dir (expand-file-name "D:/Code"))
    (defconst my-code-dir (expand-file-name "~/Code")))

  ;; 存放一些存档文件的目录
  (if sys-is-windows
      (defconst my-archives-dir (expand-file-name "D:/Archives"))
    (defconst my-archives-dir (expand-file-name "~/Archives")))

#+end_src

** 常用的工具函数

*** 重命名当前文件

#+begin_src elisp
  (defun my/rename-this-file-and-buffer (new-name)
    "Rename both current buffer and file it's visiting to NEW_NAME."
    (interactive "sNew name: ")
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (unless filename
        (error "Buffer '%s' is not visiting a file" name))
      (progn
        (when (file-exists-p filename)
          (rename-file filename new-name 1))
        (set-visited-file-name new-name)
        (rename-buffer new-name))))
#+end_src

*** 删除当前文件

#+begin_src emacs-lisp
  (defun my/delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when (and filename (y-or-n-p (concat "Do you really want to delete file " filename "?")))
        (delete-file filename t)
        (message "Deleted file %s." filename)
        (kill-buffer)
        )))
#+end_src

*** 清理 Message buffer

#+begin_src elisp
  (defun my/clear-messages-buffer ()
    "Clear *Messages* buffer."
    (interactive)
    (let ((inhibit-read-only t))
      (with-current-buffer "*Messages*"
        (erase-buffer))))
#+end_src

*** 开关网络代理

#+begin_src elisp
  (defun my/toggle-url-proxy ()
    "Toggle proxy for the url.el library."
    (interactive)
    (require 'url)
    (cond
     (url-proxy-services
      (message "Turn off URL proxy")
      (setq url-proxy-services nil))
     (t
      (message "Turn on URL proxy")
      (setq url-proxy-services
            '(("http" . "localhost:58591")
              ("https" . "localhost:58591")
              ("no_proxy" . "0.0.0.0"))))))


#+end_src

*** 清理掉没用的 buffer

#+begin_src elisp
  (defun my/kill-unused-buffers ()
    "Kill unused buffers."
    (interactive)
    (ignore-errors
      (save-excursion
        (dolist (buf (buffer-list))
          (set-buffer buf)
          (when (and (string-prefix-p "*" (buffer-name)) (string-suffix-p "*" (buffer-name)))
            (kill-buffer buf))
          ))))
#+end_src

** 基本设置
*** 用户信息

#+begin_src elisp
  (setq user-full-name "xhcoding"
	user-mail-address "xhcoding@foxmail.com")
#+end_src

*** 增加 IO 性能

#+begin_src elisp
  (setq process-adaptive-read-buffering nil)
  (setq read-process-output-max (* 1024 1024))
#+end_src

*** 设置编码

默认使用 utf-8 ，在 windows 文件名编码使用 gbk ，不然打不开中文文件
#+begin_src elisp
  (prefer-coding-system 'utf-8)
  (when sys-is-windows
    (setq file-name-coding-system 'gbk))
#+end_src

python 默认使用 UTF8 编码

#+begin_src elisp
  (setenv "PYTHONUTF8" "1")
#+end_src

*** 设置 frame 标题

#+begin_src emacs-lisp
  (setq frame-title-format "Emacs")
#+end_src

*** 关闭启动动画

#+begin_src elisp
  (setq inhibit-startup-message t)
#+end_src

*** scratch buffer 设置

scratch 为 fundaemental-mode

#+begin_src elisp
(setq initial-major-mode 'fundamental-mode)
#+end_src

scratch buffer 内容为空

#+begin_src elisp
  (setq initial-scratch-message nil)
#+end_src

*** yes-or-no-p 改为 y-or-n-p

#+begin_src elisp
  (setq use-short-answers t)
#+end_src

*** 关掉提示声音

#+begin_src elisp
  (setq visible-bell t)
#+end_src

*** 禁止光标闪烁

#+begin_src elisp
  (blink-cursor-mode -1)
#+end_src

*** 启动时不要显示 For information about GNU Emacs...

#+begin_src elisp
  (advice-add #'display-startup-echo-area-message :override #'ignore)
#+end_src

*** tab 设置

#+begin_src elisp
  (setq-default tab-width 4)

  (setq-default indent-tabs-mode nil)
#+end_src

*** 一行不超过 120 字符

#+begin_src elisp
  (setq-default fill-column 120)
#+end_src

*** 删除文件时放到回收站

#+begin_src elisp
(setq-default delete-by-moving-to-trash t)
#+end_src

*** 高亮当前行

#+begin_src elisp
(global-hl-line-mode +1)
#+end_src

** 使用 gcmh 优化垃圾回收

#+begin_src elisp
  (use-package gcmh
    :straight t
    :hook (emacs-startup . gcmh-mode)
    :init
    (setq gcmh-idle-delay 'auto
	  gcmh-auto-idle-delay-factor 10
	  gcmh-high-cons-threshold 33554432)) ; 32MB
#+end_src

** 自动保存 buffer
ref: https://github.com/manateelazycat/auto-save

#+begin_src elisp
  (use-package auto-save
    :straight (auto-save :type git :host github :repo "manateelazycat/auto-save")
    :defer 3
    :init
    ;; 关闭 emacs 默认的自动备份
    (setq make-backup-files nil)
    ;; 关闭 emacs 默认的 自动保存
    (setq auto-save-default nil)
    :config
    (setq auto-save-silent t)
    (auto-save-enable)
    )


#+end_src

** rime 输入法

#+begin_src elisp
  (use-package rime
    :straight t
    :defer t
    :init
    (setq rime--module-path
	  (expand-file-name (concat "librime-emacs" module-file-suffix) my-lib-dir))
    (when sys-is-windows
      (setq rime-share-data-dir (expand-file-name "rime-data" my-etc-dir)))

    (defun my-*require-rime(&rest _)
      "Require rime when toggle-input-method."
      (unless (featurep 'rime)
	(require 'rime)))

    (advice-add 'toggle-input-method :before #'my-*require-rime)

    :custom
    (default-input-method "rime")
    (rime-show-candidate 'posframe)
    (rime-user-data-dir (expand-file-name "rime-user" my-etc-dir))

    :config
    (setq
     rime-disable-predicates '(meow-normal-mode-p
			       meow-motion-mode-p
			       meow-keypad-mode-p))
    )

#+end_src

** 字体和主题

#+begin_src elisp
  (set-face-attribute 'default nil :font "Cascadia Code PL" :height 120)

  (set-fontset-font t 'emoji (font-spec :family "Segoe UI Symbol"))

  (set-fontset-font t 'chinese-gbk (font-spec :family "微软雅黑"))


  (use-package modus-themes
    :straight t
    :config
    (load-theme 'modus-operandi :no-confirm)
    )

#+end_src

** 图标字体安装

#+begin_src elisp
    (use-package all-the-icons
      :straight t)

#+end_src

** modeline 设置

#+begin_src elisp
  (use-package doom-modeline
    :straight t
    :config (doom-modeline-mode +1))

#+end_src

** hydra 方便的快捷键设置

#+begin_src elisp
  (use-package hydra
    :straight t)

  (use-package pretty-hydra
    :straight t
    :after hydra
    :init
    (cl-defun pretty-hydra-title (title &optional icon-type icon-name
                                        &key face height v-adjust)
      "Add an icon in the hydra title."
      (let ((face (or face `(:foreground ,(face-background 'highlight))))
            (height (or height 1.0))
            (v-adjust (or v-adjust 0.0)))
        (concat
         (when (and icon-type icon-name)
           (let ((f (intern (format "all-the-icons-%s" icon-type))))
             (when (fboundp f)
               (concat
                (apply f (list icon-name :face face :height height :v-adjust v-adjust))
                " "))))
         (propertize title 'face face))))
    )

#+end_src

** 读取最近文件

#+begin_src elisp
  (use-package recentf
    :commands (recentf-open-files)
    :hook (after-init . recentf-mode)
    :init (setq recentf-max-saved-items 500
                recentf-exclude
                '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                  "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\|bmp\\|xpm\\)$"
                  "\\.?ido\\.last$" "\\.revive$" "/G?TAGS$" "/.elfeed/"
                  "^/tmp/" "^/var/folders/.+$" ; "^/ssh:"
                  (lambda (file) (file-in-directory-p file package-user-dir))))
    :config
    (push (expand-file-name recentf-save-file) recentf-exclude))

#+end_src

** 更方便的弹出窗口

#+begin_src elisp
  (use-package popper
    :straight t
    :hook (emacs-startup . popper-mode)
    :init
    (setq popper-reference-buffers
	  '(
	    help-mode
	    rustic-cargo-run-mode
	    lsp-bridge-ref-mode
	    ))
    :config

    (with-no-warnings
      (defun my-popper-fit-window-height (win)
	"Determine the height of popup window WIN by fitting it to the buffer's content."
	(fit-window-to-buffer
	 win
	 (floor (frame-height) 3)
	 (floor (frame-height) 3)))
      (setq popper-window-height #'my-popper-fit-window-height)

      (defun popper-close-window-hack (&rest _)
	"Close popper window via `C-g'."
	;; `C-g' can deactivate region
	(when (and (called-interactively-p 'interactive)
		   (not (region-active-p))
		   popper-open-popup-alist)
	  (let ((window (caar popper-open-popup-alist)))
	    (when (window-live-p window)
	      (delete-window window)))))
      (advice-add #'keyboard-quit :before #'popper-close-window-hack))
    )


#+end_src

** 自动同步外部文件改变

#+begin_src elisp
  (use-package autorevert
    :config
    (global-auto-revert-mode +1))

#+end_src

** minibuffer 补全及增强

#+begin_src elisp
  (use-package orderless
    :straight t
    :custom (completion-styles '(orderless)))

  (use-package vertico
    :straight t
    :config
    (vertico-mode +1))

  (use-package marginalia
    :straight t
    :config
    (marginalia-mode +1))

  (use-package consult
    :straight t
    :commands (consult-customize)
    :init
    (consult-customize
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file
     consult--source-bookmark consult--source-recent-file
     :preview-key (kbd "M-."))
    :config
    (when sys-is-windows
      (add-to-list 'process-coding-system-alist '("es" gbk . gbk))
      (add-to-list 'process-coding-system-alist '("explorer" gbk . gbk))
      (setq consult-locate-args (encode-coding-string "es.exe -i -p -r" 'gbk)))

    (defun consult--fd-builder (input)
      (pcase-let* ((`(,arg . ,opts) (consult--command-split input))
		   (`(,re . ,hl) (funcall consult--regexp-compiler
					  arg 'extended t)))
	(when re
	  (list :command (append
			  (list "fd"
				"--color=never" "--full-path"
				(consult--join-regexps re 'extended))
			  opts)
		:highlight hl))))

    (defun consult-fd (&optional dir initial)
      (interactive "P")
      (let* ((prompt-dir (consult--directory-prompt "Fd" dir))
	     (default-directory (cdr prompt-dir)))
	(find-file (consult--find (car prompt-dir) #'consult--fd-builder initial))))
    )
#+end_src

** avy 快速移动光标到屏幕上任意字符

#+begin_src elisp
  (use-package pinyinlib
    :straight t
    :defer t)

  (use-package avy
    :straight t
    :bind (("M-'" . my/avy-goto-char-timer))
    :init
    (defun my/avy-goto-char-timer (&optional arg)
      "Make avy-goto-char-timer support pinyin"
      (interactive "P")
      (require 'pinyinlib)
      (require 'avy)
      (let ((avy-all-windows (if arg
                                 (not avy-all-windows)
                               avy-all-windows)))
        (avy-with avy-goto-char-timer
          (setq avy--old-cands (avy--read-candidates
                                'pinyinlib-build-regexp-string))
          (avy-process avy--old-cands))))


    :config
    (setq avy-all-windows nil
          avy-all-windows-alt t
          avy-background t
          avy-style 'pre))
#+end_src

** ace-window 快速切换到其它 window

#+begin_src elisp
  (use-package ace-window
    :straight t
    :bind (("M-o" . ace-window)))
#+end_src

** 快速切换到单窗口

ref:https://github.com/manateelazycat/toggle-one-window

#+begin_src elisp
  (defvar my--window-configuration nil
    "The window configuration use for `toggle-one-window'.")

  (defun my/toggle-one-window ()
    "Toggle between window layout and one window."
    (interactive)
    (if (equal (length (cl-remove-if #'window-dedicated-p (window-list))) 1)
        (if my--window-configuration
            (progn
              (set-window-configuration my--window-configuration)
              (setq my--window-configuration nil))
          (message "No other windows exist."))
      (setq my--window-configuration (current-window-configuration))
      (delete-other-windows)))

  (global-set-key (kbd "M-;") #'my/toggle-one-window)
#+end_src

** 代码片段

#+begin_src elisp
  (use-package yasnippet
    :straight t
    :defer t
    :config
    (add-to-list 'yas-snippet-dirs my-private-snippets-dir)
    (yas-reload-all))

#+end_src

** project 设置

#+begin_src elisp
  (use-package project
    :defer t
    :custom
    (project-switch-commands #'project-find-file)
    :config
    (defun my--project-files-in-directory (dir)
      "Use `fd' to list files in DIR."
      (let* ((default-directory dir)
             (localdir (file-local-name (expand-file-name dir)))
             (command (format "fd . --color=never --type f -0 -H -E .git --path-separator=/ %s" localdir)))
        (project--remote-file-names
         (sort (split-string (shell-command-to-string command) "\0" t)
               #'string<))))

    ;; (head vc) 表示对于所有 vc 项目
    (cl-defmethod project-files ((project (head vc)) &optional dirs)
      "Override `project-files' to use `fd' in vc projects."
      (mapcan #'my--project-files-in-directory
              (or dirs (list (project-root project))))))


#+end_src

** lsp-bridge 代码补全

#+begin_src elisp

  (use-package markdown-mode
    :straight t
    :defer t)

  (use-package lsp-bridge
    :straight (lsp-bridge :type git :host github :repo "manateelazycat/lsp-bridge"
              :files ("*")
              :build nil)
    :defer t
    :hook ((lsp-bridge-mode . my-lsp-bridge--remap-xref))
    :init

    ;; 手动添加到 load-path
    (add-to-list 'load-path (straight--repos-dir "lsp-bridge"))

    (setq lsp-bridge-org-babel-lang-list nil)

    ;; https://tecosaur.github.io/emacs-config/config.html#lsp-support-src
    (cl-defmacro my-lsp-org-babel-enable (lang)
      "Support LANG in org source code block."
      (cl-check-type lang string)
      (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
         (setq file-name (expand-file-name "OrgBabel/org-src-babel" my-code-dir))
         (write-region (point-min) (point-max) file-name))
           (setq buffer-file-name file-name)
           (my-enable-lsp-bridge)))
       (put ',intern-pre 'function-documentation
        (format "Enable lsp-bridge-mode in the buffer of org source block (%s)."
            (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
         (,intern-pre info))
           (put ',edit-pre 'function-documentation
            (format "Prepare local buffer environment for org source block (%s)."
                (upcase ,lang))))))))

    (with-eval-after-load 'org
      (dolist (lang '("c" "cpp" "python" "rust"))
    (eval `(my-lsp-org-babel-enable ,lang))))


    :config

    (push '(js-ts-mode . "javascript") lsp-bridge-single-lang-server-mode-list)
    (push '(typescript-ts-mode . "typescript") lsp-bridge-single-lang-server-mode-list)
    (push '(css-ts-mode . "vscode-css-language-server") lsp-bridge-single-lang-server-mode-list)
    (push '(scss-mode . "vscode-css-language-server") lsp-bridge-single-lang-server-mode-list)
    (push '(cmake-ts-mode . "cmake-language-server") lsp-bridge-single-lang-server-mode-list)

    (push '(qml-ts-mode . "qmlls_javascript") lsp-bridge-multi-lang-server-mode-list)

    (setq lsp-bridge-user-langserver-dir my-etc-dir
          lsp-bridge-user-multiserver-dir my-etc-dir)


    (setq acm-enable-tabnine nil
      acm-enable-quick-access t
      lsp-bridge-enable-hover-diagnostic t)

    (defun my-lsp-bridge--remap-xref()
      "Remap xref key bind when lsp-bridge-mode enable."
      (unless (eq major-mode 'emacs-lisp-mode)
    (local-set-key (kbd "M-.") #'lsp-bridge-find-def)
    (local-set-key (kbd "M-?") #'lsp-bridge-find-references)
    (local-set-key (kbd "M-,") #'lsp-bridge-find-def-return)
    ))
    )
#+end_src

启动 lsp-bridge

#+begin_src elisp
  (defun my-enable-lsp-bridge()
    "Enable lsp bridge mode."
    (require 'yasnippet)
    (yas-minor-mode)
    (require 'lsp-bridge)
    ;; (when-let* ((project (project-current))
    ;;            (project-root (nth 2 project)))
    ;;   (setq-local lsp-bridge-user-langserver-dir project-root
    ;;               lsp-bridge-user-multiserver-dir project-root))
    (lsp-bridge-mode))


  (add-hook 'emacs-lisp-mode-hook #'my-enable-lsp-bridge)
#+end_src

** 输入成对括号

#+begin_src elisp
  (use-package elec-pair
    :hook (after-init . electric-pair-mode)
    :init (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit))
#+end_src

** 高亮外层括号

#+begin_src elisp
  (use-package highlight-parentheses
    :straight t
    :hook (prog-mode . highlight-parentheses-mode))
#+end_src

** 注释代码

#+begin_src elisp
  (use-package evil-nerd-commenter
    :straight t
    :bind ("C-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** git 配置

*** magit

#+begin_src elisp
  (use-package magit
    :straight t
    :bind ("C-x g" . magit-status)
    :config
    (when sys-is-windows
      (setenv "GIT_ASKPASS" "git-gui--askpass")))

  (use-package magit-todos
    :straight t
    :after magit
    :config
    (magit-todos-mode +1))


  (use-package ssh-agency
    :straight t
    :after magit)
#+end_src

*** 显示当前行的最后提交信息

#+begin_src emacs-lisp
  (use-package git-messenger
    :straight t
    :bind (:map vc-prefix-map
           ("p" . git-messenger:popup-message)
           :map git-messenger-map
           ("m" . git-messenger:copy-message))
    :init
    (setq git-messenger:show-detail t
          git-messenger:use-magit-popup t)

    (defface posframe-border
      `((t (:inherit region)))
      "Face used by the `posframe' border."
      :group 'posframe)
    :config
    (with-no-warnings
      (with-eval-after-load 'hydra
        (defhydra git-messenger-hydra (:color blue)
          ("s" git-messenger:popup-show "show")
          ("c" git-messenger:copy-commit-id "copy hash")
          ("m" git-messenger:copy-message "copy message")
          ("," (catch 'git-messenger-loop (git-messenger:show-parent)) "go parent")
          ("q" git-messenger:popup-close "quit")))

      (defun my-git-messenger:format-detail (vcs commit-id author message)
        (if (eq vcs 'git)
            (let ((date (git-messenger:commit-date commit-id))
                  (colon (propertize ":" 'face 'font-lock-comment-face)))
              (concat
               (format "%s%s %s \n%s%s %s\n%s  %s %s \n"
                       (propertize "Commit" 'face 'font-lock-keyword-face) colon
                       (propertize (substring commit-id 0 8) 'face 'font-lock-comment-face)
                       (propertize "Author" 'face 'font-lock-keyword-face) colon
                       (propertize author 'face 'font-lock-string-face)
                       (propertize "Date" 'face 'font-lock-keyword-face) colon
                       (propertize date 'face 'font-lock-string-face))
               (propertize (make-string 38 ?─) 'face 'font-lock-comment-face)
               message
               (propertize "\nPress q to quit" 'face '(:inherit (font-lock-comment-face italic)))))
          (git-messenger:format-detail vcs commit-id author message)))

      (defun my-git-messenger:popup-message ()
        "Popup message with `posframe', `pos-tip', `lv' or `message', and dispatch actions with `hydra'."
        (interactive)
        (let* ((hydra-hint-display-type 'message)
               (vcs (git-messenger:find-vcs))
               (file (buffer-file-name (buffer-base-buffer)))
               (line (line-number-at-pos))
               (commit-info (git-messenger:commit-info-at-line vcs file line))
               (commit-id (car commit-info))
               (author (cdr commit-info))
               (msg (git-messenger:commit-message vcs commit-id))
               (popuped-message (if (git-messenger:show-detail-p commit-id)
                                    (my-git-messenger:format-detail vcs commit-id author msg)
                                  (cl-case vcs
                                    (git msg)
                                    (svn (if (string= commit-id "-")
                                             msg
                                           (git-messenger:svn-message msg)))
                                    (hg msg)))))
          (setq git-messenger:vcs vcs
                git-messenger:last-message msg
                git-messenger:last-commit-id commit-id)
          (run-hook-with-args 'git-messenger:before-popup-hook popuped-message)
          (git-messenger-hydra/body)
          (cond ((and (fboundp 'posframe-workable-p) (posframe-workable-p))
                 (let ((buffer-name "*git-messenger*"))
                   (posframe-show buffer-name
                                  :string (concat (propertize "\n" 'face '(:height 0.3))
                                                  popuped-message
                                                  "\n"
                                                  (propertize "\n" 'face '(:height 0.3)))
                                  :left-fringe 8
                                  :right-fringe 8
                                  :max-width (round (* (frame-width) 0.62))
                                  :max-height (round (* (frame-height) 0.62))
                                  :internal-border-width 1
                                  :internal-border-color (face-background 'posframe-border nil t)
                                  :background-color (face-background 'tooltip nil t))
                   (unwind-protect
                       (push (read-event) unread-command-events)
                     (posframe-hide buffer-name))))
                ((and (fboundp 'pos-tip-show) (display-graphic-p))
                 (pos-tip-show popuped-message))
                ((fboundp 'lv-message)
                 (lv-message popuped-message)
                 (unwind-protect
                     (push (read-event) unread-command-events)
                   (lv-delete-window)))
                (t (message "%s" popuped-message)))
          (run-hook-with-args 'git-messenger:after-popup-hook popuped-message)))
      (advice-add #'git-messenger:popup-close :override #'ignore)
      (advice-add #'git-messenger:popup-message :override #'my-git-messenger:popup-message)))
#+end_src

*** smerge-mode 解决冲突

#+begin_src elisp
  (use-package smerge-mode
    :ensure nil
    :pretty-hydra
    ((:title (pretty-hydra-title "Smerge" 'octicon "diff")
             :color pink :quit-key "q")
     ("Move"
      (("n" smerge-next "next")
       ("p" smerge-prev "previous"))
      "Keep"
      (("b" smerge-keep-base "base")
       ("u" smerge-keep-upper "upper")
       ("l" smerge-keep-lower "lower")
       ("a" smerge-keep-all "all")
       ("RET" smerge-keep-current "current")
       ("C-m" smerge-keep-current "current"))
      "Diff"
      (("<" smerge-diff-base-upper "upper/base")
       ("=" smerge-diff-upper-lower "upper/lower")
       (">" smerge-diff-base-lower "upper/lower")
       ("R" smerge-refine "refine")
       ("E" smerge-ediff "ediff"))
      "Other"
      (("C" smerge-combine-with-next "combine")
       ("r" smerge-resolve "resolve")
       ("k" smerge-kill-current "kill")
       )))
    :bind (:map smerge-mode-map
                ("C-c m" . smerge-mode-hydra/body)))
#+end_src

** 可视化的正则替换

#+begin_src elisp
  (use-package visual-regexp
    :straight t
    :defer t)
#+end_src

** 递增选区

#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :bind (("C-=" . er/expand-region))
    :config
    (defun treesit-mark-bigger-node ()
      (let* ((root (treesit-buffer-root-node))
             (node (treesit-node-descendant-for-range root (region-beginning) (region-end)))
             (node-start (treesit-node-start node))
             (node-end (treesit-node-end node)))
        ;; Node fits the region exactly. Try its parent node instead.
        (when (and (= (region-beginning) node-start) (= (region-end) node-end))
          (when-let ((node (treesit-node-parent node)))
            (setq node-start (treesit-node-start node)
                  node-end (treesit-node-end node))))
        (set-mark node-end)
        (goto-char node-start)))

    (add-to-list 'er/try-expand-list 'treesit-mark-bigger-node)
    )

#+end_src

** openwith 外部工具打开文件

#+begin_src elisp
  (use-package openwith
    :straight t
    :custom
    (openwith-associations
     '(("\\.\\(doc\\|docs\\|xls\\|xlsx\\|ppt\\|pptx\\)$"
          "explorer.exe" (file))))
    :config
    (openwith-mode +1))
#+end_src

** 启用 treesit

#+begin_src elisp
  (setq major-mode-remap-alist
		'((c-mode          . c-ts-mode)
		  (c++-mode        . c++-ts-mode)
		  (cmake-mode      . cmake-ts-mode)
		  (conf-toml-mode  . toml-ts-mode)
		  (csharp-mode     . csharp-ts-mode)
		  (css-mode        . css-ts-mode)
		  (dockerfile-mode . dockerfile-ts-mode)
		  (go-mode         . go-ts-mode)
		  (java-mode       . java-ts-mode)
		  (json-mode       . json-ts-mode)
		  (js-json-mode    . json-ts-mode)
		  (javascript-mode . js-ts-mode)
		  (python-mode     . python-ts-mode)
		  (rust-mode       . rust-ts-mode)
		  (sh-mode         . bash-ts-mode)
		  (typescript-mode . typescript-ts-mode)))
#+end_src

** C++ 开发配置

*** cmake-ts-mode 设置

#+begin_src emacs-lisp
  (use-package cmake-ts-mode
    :hook (cmake-ts-mode . my-enable-lsp-bridge))
#+end_src

*** c-ts-mode 设置

#+begin_src elisp
  (use-package c-ts-mode
    :hook (c++-ts-mode . my-enable-cc-dev)
    :custom
    (c-ts-mode-indent-offset  4)
    :config
    (defun my-enable-cc-dev()
      (setq-local lsp-bridge-completion-hide-characters '(";" "(" ")" "[" "]" "{" "}" "," "\""))
      (my-enable-lsp-bridge)
      )
    )
#+end_src

** Rust 开发配置

#+begin_src elisp
  (use-package rust-ts-mode
    :hook (rust-ts-mode . my-enable-lsp-bridge))
#+end_src

** python 开发配置

#+begin_src emacs-lisp
  (use-package python
    :hook (python-ts-mode . my-enable-lsp-bridge))
#+end_src

** web 开发

*** Javascript

#+begin_src elisp
  (use-package js
    :hook (js-ts-mode . my-enable-lsp-bridge)
    )
#+end_src

*** Typescript

#+begin_src emacs-lisp
  (use-package typescript-ts-mode
    :hook (typescript-ts-base-mode . my-enable-lsp-bridge))
#+end_src

*** HTML

#+begin_src emacs-lisp
  (use-package web-mode
    :straight t
    :mode "\\.\\(phtml\\|php\\|[gj]sp\\|as[cp]x\\|erb\\|djhtml\\|html?\\|hbs\\|ejs\\|jade\\|swig\\|tm?pl\\|vue\\)$"
    :hook (web-mode . my-enable-lsp-bridge)
    :custom
    (web-mode-markup-indent-offset 2)
    (web-mode-css-indent-offset 2)
    (web-mode-code-indent-offset 2)
    (web-mode-enable-auto-indentation nil)
    )
#+end_src

*** css


#+begin_src elisp
  (use-package css-mode
    :hook (css-ts-mode . my-enable-lsp-bridge)
    :custom
    (css-indent-offset 2))

  (use-package scss-mode
    :hook (scss-mode . my-enable-lsp-bridge))
#+end_src

** json-mode

#+begin_src elisp
  (use-package json-js-mode
    :defer t
    :custom
    (json-ts-mode-indent-offset 2))
#+end_src

** qml

#+begin_src elisp
  (use-package qml-ts-mode
    :straight (qml-ts-mode :type git :host github :repo "xhcoding/qml-ts-mode")
    :hook (qml-ts-mode . my-enable-lsp-bridge)
    :custom
    (qml-ts-mode-indent-offset 4))
#+end_src

** plantuml 支持

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :straight t
    :defer t
    :custom
    (plantuml-jar-path (expand-file-name "plantuml.jar" my-lib-dir))
    (plantuml-default-exec-mode 'jar))
#+end_src

** dap-mode 配置

#+begin_src elisp
  (use-package dap-mode
    :straight t
    :defer t
    :config

    ;; fix runInTerminal
    (defun dap--start-process (debug-session parsed-msg)
      (-let* (((&hash "arguments" (&hash? "args" "cwd" "title" "kind") "seq")
           parsed-msg)
          (default-directory cwd)
          (command-to-run (combine-and-quote-strings args " "))
          (kind (or kind dap-default-terminal-kind)))
    (or
     (when (string= kind "external")
       (let* ((name (or title (concat (dap--debug-session-name debug-session)
                      "- terminal")))
          (terminal-argv
           (cl-loop for part in dap-external-terminal collect
                (->> part (s-replace "{display}" name)
                 (s-replace "{command}" command-to-run)))))
         (when
         (condition-case-unless-debug err
             (progn (apply #'start-process name name terminal-argv) t)
           (error (lsp--warn
               "dap-debug: failed to start external
  terminal: %S (launch command was: \"%s\"). Set
  `dap-external-terminal' to the correct value or install the
  terminal configured (probably xterm)."
               (error-message-string err)
               (mapconcat #'shell-quote-argument terminal-argv " "))
              ;; we did *not* succeed; use the integrated terminal
              ;; instead
              nil))
           ;; NOTE: we cannot know the process id of the started
           ;; application.
           (dap--send-message (dap--make-success-response
                   seq "runInTerminal" (make-hash-table :test 'equal))
                  ;; NOTE: assuming that the terminal starts the
                  ;; application without another subshell
                  (dap--resp-handler) debug-session)
           ;; success; don't use the integrated terminal
           t)))
     ;; integrated terminal *or* the external terminal could not be executed
     ;; (file error).
     (when (or (string= kind "integrated") (string= kind "external"))
       (funcall dap-internal-terminal command-to-run title debug-session)
       ;; NOTE: we don't know the PID of the shell that ran the process and we
       ;; don't know the PID of the started process.
       (dap--send-message (dap--make-success-response seq "runInTerminal" (make-hash-table :test 'equal))
                  (dap--resp-handler) debug-session)
       ;; success
       t)
     (dap--send-message (dap--make-error-response
                 seq "runInTerminal" nil
                 (format "unknown terminal kind %s" kind))
                (dap--resp-handler) debug-session))))

      ;; codelldb
    (require 'dap-codelldb)

    (defun my-dap--get-program-from-cargo-config(conf)
      "Get program from cargo config."
      (when-let* ((cwd (plist-get conf :cwd))
          (cargo (plist-get conf :cargo))
          (args (plist-get cargo :args)))
    (let* ((default-directory cwd)
           (command (format "cargo %s --message-format=json" (mapconcat 'identity args " ")))
           (output (shell-command-to-string command))
           (lines (split-string output "\n"))
           (msg)
           (artifacts))
      (dolist (line lines)
        (setq msg (ignore-errors (json-parse-string line)))
        (when (and msg (string-equal (gethash "reason" msg) "compiler-artifact"))
          (let* ((target (gethash "target" msg))
             (is-binary (member "bin" (append (gethash "crate_types" target) nil)))
             (kind (gethash "kind" target))
             (is-build-script (member "custom-build" (append kind nil)))
             (profile-test (gethash "test" (gethash "profile" msg)))
             (name (gethash "name" target))
             (executable (gethash "executable" msg)))
        (when (or (and is-binary (not is-build-script)) profile-test)
          (push `(:filename ,executable :name ,name :kind ,(aref kind 0)) artifacts)))))

      (let* ((filter (plist-get cargo :filter))
         (filter-name (plist-get filter :name))
         (filter-kind (plist-get filter :kind))
         (filtered-artifacts))
        (if (not (and filter filter-name filter-kind))
        (setq filtered-artifacts (copy-tree artifacts))
          (dolist (artifact artifacts)
        (when (and (string= filter-name (plist-get artifact :name))
               (string= filter-kind (plist-get artifact :kind))
               )
          (push artifact filtered-artifacts)
          )))
        (if (length= filtered-artifacts 1)
        (plist-get (car filtered-artifacts) :filename)
          (message "Cargo artifact error, check launch.json.")
          nil)))))

    (defun my-dap--get-codelldb-params (conf)
      ""
      (let ((params (make-hash-table :test 'equal)))
    (puthash "evaluateForHovers" 't params)
    (puthash "commandCompletions" 't params)
    (when (plist-get conf :cargo)
      (puthash "sourceLanguages" (vector "rust") params)
      )
    (json-encode (json-encode params))))

    (defun dap-codelldb--populate-lldb (conf)
      "Populate CONF with the required arguments."
      (let ((debug-port (dap--find-available-port)))
    (-> conf
        (dap--put-if-absent :type "lldb")
        (dap--put-if-absent :host "localhost")
        (dap--put-if-absent :debugServer debug-port)
        (dap--put-if-absent :program-to-start
                (format "%s --port %s --params %s"
                    dap-codelldb-debug-program
                    debug-port
                    (my-dap--get-codelldb-params conf)
                    ))
        (dap--put-if-absent :cwd default-directory)
        (dap--put-if-absent :program (or (my-dap--get-program-from-cargo-config conf) (expand-file-name (read-file-name "Select file to debug: "))))
        )))

    (dap-register-debug-provider "lldb" 'dap-codelldb--populate-lldb)

    (add-hook 'dap-stopped-hook
          (lambda (arg) (call-interactively #'dap-hydra)))

    (dap-auto-configure-mode +1)

    )

#+end_src

下面的 wrapper 可以在不启动 lsp-mode 的情况下通过 lsp-workspace-root 获取正确的值

#+begin_src elisp
  (eval-and-compile
    (defun my--ensure-lsp-workspace-root()
      "Ensure `lsp-workspace-root' valid."
      (require 'lsp-mode)
      (unless (lsp-workspace-root)
        (let* ((session (lsp-session))
               (lsp-auto-guess-root t)
               (project-root (lsp-f-canonical (lsp--calculate-root session (buffer-file-name)))))
          (unless (-contains? (lsp-session-folders session) project-root)
            (cl-pushnew project-root (lsp-session-folders session))
            (lsp--persist-session session))
          ))))

  (defun my/dap-debug()
    "dap-debug wrapper."
    (interactive)
    (require 'dap-mode)
    (my--ensure-lsp-workspace-root)
    (call-interactively #'dap-debug)
    )
#+end_src

** org 配置

*** org-mode 美化设置

#+begin_src elisp
  (use-package org
    :defer t
    :straight t
    :hook (org-mode . my--org-prettify-symbols)
    :custom-face
    ;; 设置Org mode标题以及每级标题行的大小
    (org-document-title ((t (:height 1.75 :weight bold))))
    (org-level-1 ((t (:height 1.2 :weight bold))))
    (org-level-2 ((t (:height 1.15 :weight bold))))
    (org-level-3 ((t (:height 1.1 :weight bold))))
    (org-level-4 ((t (:height 1.05 :weight bold))))
    (org-level-5 ((t (:height 1.0 :weight bold))))
    (org-level-6 ((t (:height 1.0 :weight bold))))
    (org-level-7 ((t (:height 1.0 :weight bold))))
    (org-level-8 ((t (:height 1.0 :weight bold))))
    (org-level-9 ((t (:height 1.0 :weight bold))))
    ;; 设置代码块用上下边线包裹
    (org-block-begin-line ((t (:underline t :background unspecified))))
    (org-block-end-line ((t (:overline t :underline nil :background unspecified))))

    :custom
    ;; 标题行美化
    (org-fontify-whole-heading-line t)
    ;; 设置标题行折叠符号
    (org-ellipsis " ▾")
    ;; TODO标签美化
    (org-fontify-todo-headline t)
    ;; DONE标签美化
    (org-fontify-done-headline t)
    ;; 引用块美化
    (org-fontify-quote-and-verse-blocks t)
    ;; 隐藏宏标记
    (org-hide-macro-markers t)
    ;; 隐藏强调标签
    (org-hide-emphasis-markers t)
    ;; 高亮latex语法
    (org-highlight-latex-and-related '(native script entities))
    ;; 以UTF-8显示
    (org-pretty-entities t)
    ;; 当启用缩进模式时自动隐藏前置星号
    (org-indent-mode-turns-on-hiding-stars t)
    ;; 自动启用缩进
    (org-startup-indented nil)
    ;; 根据标题栏自动缩进文本
    (org-adapt-indentation nil)
    ;; 自动显示图片
    (org-startup-with-inline-images t)
    ;; 默认以Overview的模式展示标题行
    (org-startup-folded 'overview)
    ;; 允许字母列表
    (org-list-allow-alphabetical t)
    ;; 编辑时检查是否在折叠的不可见区域
    (org-fold-catch-invisible-edits 'smart)
    ;; 上标^下标_是否需要特殊字符包裹，这里设置需要用大括号包裹
    (org-use-sub-superscripts '{})
    :config

    (defun my--org-prettify-symbols ()
      (setq prettify-symbols-alist
            (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                    '(
                      ("#+begin_src"                        . ?✎)
                      ("#+end_src"                          . ?□)
                      ("#+results:"                         . ?💻)
                      ("#+date:"                            . ?📅)
                      ("#+author:"                          . ?👤)
                      ("#+title:"                           . ?📓)
                      ("#+hugo_tags:"                       . ?📍)
                      ("#+hugo_categories"                  . ?📁)
                      ("#+hugo_locale"                      . ?🌐)
                      ("#+hugo_draft"                       . ?🚮)
                      ("#+hugo_custom_front_matter"         . ?📝)
                      ("#+begin_quote"                      . ?«)
                      ("#+end_quote"                        . ?»)
                      )))
      (setq prettify-symbols-unprettify-at-point t)
      (prettify-symbols-mode 1))

    ;; 中文强调标记可用
    (setcar (nthcdr 0 org-emphasis-regexp-components) " \t('\"{[:nonascii:]")
    (setcar (nthcdr 1 org-emphasis-regexp-components) "- \t.,:!?;'\")}\\[[:nonascii:]")
    (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
    (org-element-update-syntax)


    ;; 设置标题行之间总是有空格；列表之间根据情况自动加空格
    (setq org-blank-before-new-entry '((heading . t)
                                       (plain-list-item . auto)
                                       ))
    )

  (use-package org-modern
    :straight t
    :hook (org-mode . org-modern-mode)
    :config
    ;; 额外的行间距，0.1表示10%，1表示1px
    (setq-default line-spacing 0.1)
    ;; tag边框宽度，还可以设置为 `auto' 即自动计算
    (setq org-modern-label-border 1)
    ;; 设置表格竖线宽度，默认为3
    (setq org-modern-table-vertical 2)
    ;; 设置表格横线为0，默认为0.1
    (setq org-modern-table-horizontal 0)
    ;; 复选框美化
    (setq org-modern-checkbox
          '((?X . #("▢✓" 0 2 (composition ((2)))))
            (?- . #("▢–" 0 2 (composition ((2)))))
            (?\s . #("▢" 0 1 (composition ((1)))))))
    ;; 列表符号美化
    (setq org-modern-list
          '((?- . "•")
            (?+ . "◦")
            (?* . "▹")))
    ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
    (setq org-modern-block-name nil)
    ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
    (setq org-modern-keyword nil)
    )

  (use-package org-appear
    :straight t
    :hook (org-mode . org-appear-mode)
    :config
    (setq org-appear-autolinks t)
    (setq org-appear-autosubmarkers t)
    (setq org-appear-autoentities t)
    (setq org-appear-autokeywords t)
    (setq org-appear-inside-latex t)
    )
#+end_src

*** org 基本配置

#+begin_src elisp
  (use-package org
    :defer t
    :straight t
    :bind (:map org-mode-map
                ("<" . my/insert-org-template))
    :custom
    (org-directory my-org-dir)
    :config
    ;; For hydra
    (defun hot-expand (str &optional mod)
      "Expand org template.
  STR is a structure template string recognised by org like <s. MOD is a
  string with additional parameters to add the begin line of the
  structure element. HEADER string includes more parameters that are
  prepended to the element after the #+HEADER: tag."
      (let (text)
        (when (region-active-p)
          (setq text (buffer-substring (region-beginning) (region-end)))
          (delete-region (region-beginning) (region-end)))
        (insert str)
        (if (fboundp 'org-try-structure-completion)
            (org-try-structure-completion) ; < org 9
          (progn
            ;; New template expansion since org 9
            (require 'org-tempo nil t)
            (org-tempo-complete-tag)))
        (when mod (insert mod) (forward-line))
        (when text (insert text))))

    (defun my/insert-org-template()
      "Insert org template"
      (interactive)
      (if (or (region-active-p) (looking-back "^\s*" 1))
          (org-hydra/body)
        (self-insert-command 1)))

    :pretty-hydra
    ;; See `org-structure-template-alist'
    ((:title (pretty-hydra-title "Org Template" 'fileicon "org" :face 'all-the-icons-green :height 1.1 :v-adjust 0.0)
             :color blue :quit-key ("q" "C-g"))
     ("Basic"
      (("a" (hot-expand "<a") "ascii")
       ("c" (hot-expand "<c") "center")
       ("C" (hot-expand "<C") "comment")
       ("e" (hot-expand "<e") "example")
       ("E" (hot-expand "<E") "export")
       ("h" (hot-expand "<h") "html")
       ("l" (hot-expand "<l") "latex")
       ("n" (hot-expand "<n") "note")
       ("o" (hot-expand "<q") "quote")
       ("v" (hot-expand "<v") "verse"))
      "Head"
      (("i" (hot-expand "<i") "index")
       ("A" (hot-expand "<A") "ASCII")
       ("I" (hot-expand "<I") "INCLUDE")
       ("H" (hot-expand "<H") "HTML")
       ("L" (hot-expand "<L") "LaTeX"))
      "Source"
      (("s" (hot-expand "<s") "src")
       ("m" (hot-expand "<s" "emacs-lisp") "emacs-lisp")
       ("y" (hot-expand "<s" "python :results output") "python")
       ("p" (hot-expand "<s" "perl") "perl")
       ("w" (hot-expand "<s" "powershell") "powershell")
       ("r" (hot-expand "<s" "ruby") "ruby")
       ("S" (hot-expand "<s" "sh") "sh")
       ("g" (hot-expand "<s" "go :imports '\(\"fmt\"\)") "golang"))
      "Misc"
      (("u" (hot-expand "<s" "plantuml :file CHANGE.png") "plantuml")
       ("Y" (hot-expand "<s" "ipython :session :exports both :results raw drawer\n$0") "ipython")
       ("P" (progn
              (insert "#+HEADERS: :results output :exports both :shebang \"#!/usr/bin/env perl\"\n")
              (hot-expand "<s" "perl")) "Perl tangled")
       ("<" self-insert-command "ins"))))
    )
#+end_src

*** org babel 设置

#+begin_src elisp
  (use-package org
    :defer t
    :straight t
    :custom
    (org-confirm-babel-evaluate nil)
    (org-export-use-babel nil)
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 '((emacs-lisp . t)
                                   (perl . t)
                                   (python . t)
                                   (ruby . t)
                                   (js . t)
                                   (css . t)
                                   (sass . t)
                                   (C . t)
                                   (java . t)
                                   (plantuml . t)))
    ;; C 执行支持 :stdin 数据
    (defun my*org-babel-execute-add-stdin(args)
      (let* ((body (nth 0 args))
             (params (nth 1 args))
             (stdin (cdr (assq :stdin params)))
             (cmdline (cdr (assq :cmdline params)))
             (stdin-file (expand-file-name "input_data.txt" (temporary-file-directory)))
             (data))
        (when stdin
          (setq data
                (save-excursion
                  (org-babel-goto-named-src-block stdin)
                  (org-element-property :value (org-element-at-point))))
          (with-temp-file stdin-file
            (insert data))
          (setq cmdline (concat (or cmdline "") " < " stdin-file))
          (setf (alist-get :cmdline params) cmdline))
        `(,body ,params)
        ))
    (advice-add #'org-babel-C-execute :filter-args 'my*org-babel-execute-add-stdin)

    )
#+end_src

*** gtd 配置

#+begin_src elisp
  (use-package org
    :defer t
    :straight t
    :bind (("C-c a" . org-agenda)
           ("C-c c" . org-capture))
    :init
    (setq my-org-inbox-file (expand-file-name "gtd/inbox.org" my-org-dir))
    (setq my-org-projects-file (expand-file-name "gtd/projects.org" my-org-dir))

    (defun my--verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets"
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))

    :custom
    (org-agenda-files `(,my-org-inbox-file ,my-org-projects-file))
    (org-capture-templates `(("i" "Inbox" entry
                              (file ,my-org-inbox-file)
                              ,(concat "* TODO %?\n"
                                       "/Entered on/ %U"))))
    (org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "HOLD(h)" "|" "DONE(d)" "CANCELLED(c)")))

    ;; refile
    (org-refile-targets '((nil :maxlevel . 9)
                          (org-agenda-files :maxlevel . 9)))

    (org-refile-use-outline-path t)
    (org-outline-path-complete-in-steps nil)
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-target-verify-function 'my--verify-refile-target)

    ;; agenda

    (org-agenda-span 'day)
    (org-agenda-hide-tags-regexp ".")
    (org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t% s")
          (todo   . " ")
          (tags   . " %i %-12:c")
          (search . " %i %-12:c")))

    (org-agenda-custom-commands
        '(("g" "Get Things Done (GTD)"
           ((agenda ""
                    ((org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'deadline))
                     (org-deadline-warning-days 0)))
            (todo "NEXT"
                  ((org-agenda-skip-function
                    '(org-agenda-skip-entry-if 'deadline))
                   (org-agenda-prefix-format "  %i %-12:c ")
                   (org-agenda-overriding-header "\nTasks\n")))
            (agenda nil
                    ((org-agenda-entry-types '(:deadline))
                     (org-agenda-format-date "")
                     (org-deadline-warning-days 7)
                     (org-agenda-skip-function
                      '(org-agenda-skip-entry-if 'notregexp "\\* NEXT"))
                     (org-agenda-overriding-header "\nDeadlines")))
            (tags-todo "inbox"
                       ((org-agenda-prefix-format "  %?-12t% s")
                        (org-agenda-overriding-header "\nInbox\n")))
            (tags "CLOSED>\"<today>\""
                  ((org-agenda-overriding-header "\nCompleted today\n")))))))



    )
#+end_src

*** export 设置

#+begin_src emacs-lisp
  (use-package org
    :straight t
    :defer t
    :hook (org-mode . my--set-org-html-head-extra)
    :config
    (defun my--set-org-html-head-extra ()
      "Set org html head extra"
      (let ((path (expand-file-name "custom-head.html" my-etc-dir)))
        (when (file-exists-p path)
          (setq org-html-head-extra (with-temp-buffer
                                      (insert-file-contents path)
                                      (buffer-string))))))
    )
#+end_src

** 知识管理及博客配置

*** org-roam

#+begin_src emacs-lisp
  (use-package emacsql-sqlite-builtin
    :straight t
    :defer t)

  (use-package org-roam
    :straight t
    :custom
    (org-roam-directory (expand-file-name "org-roam" my-org-dir))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :init
    (setq org-roam-v2-ack t)
    (setq org-roam-database-connector 'sqlite-builtin)
    :config
    (org-roam-setup)

    (setq org-roam-capture-templates
          '(("d" "default" plain "%?"
             :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                                "
  ,#+title: ${title}
  ,#+date: %<%Y-%m-%d>
  ,#+author: xhcoding
  ,#+hugo_custom_front_matter: :isCJKLanguage true
  ,#+hugo_tags:
  ,#+hugo_categories:
  ,#+hugo_draft: false
  ")
             :unnarrowed t)))
    )


#+end_src

*** hugo 配置

#+begin_src emacs-lisp
  ;; 博客相关配置
  (defconst my-blog-root-dir
    "~/Blog/"
    "Blog root directory.")

  (defconst my-blog-img-dir
    (expand-file-name "images/" my-archives-dir)
    "Blog's image directory.")

  (defconst my-blog-res-url
    "https://images.xhcoding.cn/blog/"
    "Blog's source address.")

  (defconst my-blog-post-url
    "https://xhcoding.cn/post/"
    "Blog's post address.")

  (use-package ox-hugo
    :straight t
    :after org
    :custom
    (org-hugo-base-dir my-blog-root-dir)
    (org-hugo-section "post")
    (org-hugo-default-section-directory "post")
    (org-hugo-auto-set-lastmod t)
    :config
    (defun my-blog--blog-image-file-path-p (raw-path)
      (let ((file-path (expand-file-name raw-path)))
        (equal (string-match-p (regexp-quote (expand-file-name my-blog-img-dir)) file-path) 0)))

    ;; ~/Documents/Blog/images/1.png ==> https://images.xhcoding.cn/1.png

    (defun my-blog--convert-image-url (raw-path)
      (let ((file-path (expand-file-name raw-path)))
        (concat my-blog-res-url (string-trim-left file-path my-blog-img-dir))))

    ;; id:xxxxxx ==> https://xhcoding.cn/post/aaaaa
    (defun my-blog--convert-publish-url (id)
      (let ((file-name (file-name-base (org-roam-node-file (org-roam-node-from-id id)))))
        (concat my-blog-post-url file-name)))

    ;; ~/Documents/Blog/images/1.png ==> https://images.xhcoding.cn/1.png
    ;; id:xxxxxx ==> https://xhcoding.cn/post/aaaaa
    (defun my-blog*export-blog-url (args)
      (let* ((link (nth 0 args))
             (desc (nth 1 args))
             (info (nth 2 args))
             (type (org-element-property :type link))
             (raw-path (org-element-property :path link)))
        (cond
         ((and (string-equal type "file") (my-blog--blog-image-file-path-p raw-path))
          (progn
            (let* ((image-url (my-blog--convert-image-url raw-path))
                   (new-link (org-element-put-property link :path image-url )))
              `(,new-link ,desc ,info))))
         ((string-equal type "id")
          (progn
            (let* ((post-url (my-blog--convert-publish-url raw-path))
                   (new-link))
              (setq new-link (org-element-put-property link :path post-url))
              (setq new-link (org-element-put-property new-link :type "file"))
              `(,new-link ,desc, info))))
         (t `(,link ,desc ,info))
         )))

    (advice-add #'org-hugo-link :filter-args #'my-blog*export-blog-url)

    ;; front matter author => authors
    (defun my-blog*convert-author-to-authors(front-matter)
      "Convert author to authors."
      (let ((ret (replace-regexp-in-string "author" "authors" front-matter)))
        ret))

    (advice-add #'org-hugo--get-front-matter :filter-return #'my-blog*convert-author-to-authors)
    )

  (use-package easy-hugo
    :straight t
    :defer t
    :config
    (require 'org-roam)
    (setq easy-hugo-basedir (expand-file-name my-blog-root-dir)
          easy-hugo-postdir (expand-file-name org-roam-directory)
          easy-hugo-org-header t
          easy-hugo-github-deploy-script "deploy.bat"))

#+end_src

*** 上传博客图片到腾讯云对象存储

#+begin_src emacs-lisp
  (defun my-blog/upload-images-to-tencent-cos ()
    "Upload blog images dir to tencent cos."
    (interactive)
    (call-process-shell-command
     (concat
      "coscmd upload -rs "
      my-blog-img-dir
      " blog/"
      )))

#+end_src

*** 自动在中英文插入空格

#+begin_src elisp
  (use-package pangu-spacing
    :straight t
    :after org
    :hook (org-mode . pangu-spacing-mode)
    :custom
    (pangu-spacing-real-insert-separtor t))
#+end_src

*** org-download 下载图片

#+begin_src elisp
  (use-package org-download
    :straight t
    :after org
    :config
    (when sys-is-windows
      (setq org-download-screenshot-method "irfanview /capture=4 /convert=\"%s\""
            org-download-display-inline-images 'posframe
            org-download-abbreviate-filename-function 'expand-file-name))
    (setq-default org-download-image-dir my-blog-img-dir
                  org-download-heading-lvl 2)
    (defun my/org-download-clipboard()
      "Download from clipboard"
      (interactive)
      (let ((org-download-screenshot-method "irfanview /clippaste /convert=\"%s\""))
        (org-download-screenshot))))


#+end_src

** eaf 配置

#+begin_src elisp
  (use-package eaf
    :straight (emacs-application-framework :type git :host github :repo "emacs-eaf/emacs-application-framework"
                          :files ("*")
                          :build nil)
    :defer t
    :commands (eaf-open eaf-open-browser eaf-open-this-buffer)
    :init
    ;; 手动添加到 load-path
    (add-to-list 'load-path (straight--repos-dir "emacs-application-framework"))
    :config
    (setq eaf-webengine-default-zoom 2.5)
    (require 'eaf-browser)
    (require 'eaf-pdf-viewer)
    (require 'eaf-org-previewer)
    (require 'eaf-markdown-previewer)
    )

#+end_src

** 按键提示

#+begin_src elisp
  (use-package which-key
    :straight t
    :hook (after-init . which-key-mode))
#+end_src

** 卸载默认的键绑定

ref: https://github.com/manateelazycat/lazy-load

#+begin_src elisp
  (defun lazy-load-unset-keys (key-list &optional keymap)
    "This function is to little type when unset key binding.
  `KEYMAP' is add keymap for some binding, default is `current-global-map'
  `KEY-LIST' is list contain key."
    (let (key)
      (or keymap (setq keymap (current-global-map)))
      (dolist (key key-list)
	(cond ((stringp key) (setq key (read-kbd-macro (concat key))))
	      ((vectorp key) nil)
	      (t (signal 'wrong-type-argument (list 'array key))))
	(define-key keymap key nil))))

  (lazy-load-unset-keys
   '("C-s"
     "C-x b"
     ))
#+end_src

** meow 模式编辑

#+begin_src elisp
  (use-package meow
    :straight t
    :demand t
    :hook (after-init . meow-global-mode)
    :config
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)

    (setq meow-char-thing-table
          '((?r . round)
            (?c . curly)
            (?s . string)
            (?b . buffer)
            (?d . defun)))

    (setq meow-use-clipboard t)

    (meow-leader-define-key
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("?" . meow-cheatsheet)

     '("f" . consult-fd)
     '("b" . consult-buffer)
     '("r" . consult-ripgrep)
     '("s" . consult-line)

     '("/" . evilnc-comment-or-uncomment-lines)

     '("w3" . split-window-right)
     '("w0" . delete-other-windows)
     )

    (meow-normal-define-key
     ;; char move
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("h" . meow-left)
     '("H" . meow-left-expand)

     ;; word move
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)

     ;; line move
     '("x" . meow-line)
     '("X" . meow-goto-line)

     ;; thing move
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("o" . meow-block)
     '("O" . meow-to-block)

     ;; jump
     '("n" . meow-search)
     '("f" . meow-find)
     '("v" . meow-visit)

     ;; action
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("c" . meow-change)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("p" . meow-yank)
     '("s" . meow-kill)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("G" . meow-grab)
     '("m" . meow-join)
     '("t" . meow-till)
     '("u" . undo)
     '("U" . meow-undo)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("z" . meow-pop-selection)

     ;; others
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("g" . meow-cancel-selection)
     '("q" . meow-quit)
     '("'" . repeat)
     '("<escape>" . ignore)
     )
    )
#+end_src

** 启动 emacs server

#+begin_src elisp
  (setq server-name "emacs-server-file")
  (ignore-errors
    (server-start))
#+end_src

** 将输入法切换到英文

#+begin_src elisp
  (when sys-is-windows
    (start-process "im-select" nil "im-select" "1033"))
#+end_src
